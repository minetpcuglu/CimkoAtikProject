@using DevExtreme.AspNet.Mvc
@{
    ViewData["Title"] = "Index";
}

<form id="form" method="post" enctype="multipart/form-data">
    <h3>Profile Settings</h3>
    <div class="dx-fieldset">
        <div class="dx-field">
            <div class="dx-field-label">First Name:</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TextBox()
                    .Name("FirstName")
                    .InputAttr("aria-label", "First Name")
                    .Value("John")
                    )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Last Name:</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TextBox()
                    .Name("LastName")
                    .InputAttr("aria-label", "Last Name")
                    .Value("Smith")
                    )
            </div>
        </div>
    </div>
    <div id="fileuploader-container">
        @(Html.DevExtreme().FileUploader()
            .Name("base64")
            .SelectButtonText("Select photo")
            .LabelText("")
            .Accept("image/*")
            .Multiple(true)
            .UploadMode(FileUploadMode.UseForm)
            )
    </div>
    @(Html.DevExtreme().Button()
        .ID("button")
        .Text("Update profile")
        .Type(ButtonType.Success)
        .UseSubmitBehavior(true)
        )
</form>































@*
@using (Html.BeginForm())
{

    using (Html.DevExtreme().ValidationGroup())
    {

        @Html.AntiForgeryToken()

        @(Html.DevExtreme().Form<WasteFormDTO>()
                .OnInitialized("onInitialized")
                .ShowValidationSummary(true)
                .Items(items =>
                {

                    items.AddGroup()
                        .Caption("Tesis Bilgiler")
                        .Items(groupItems =>
                        {
                            groupItems.AddSimpleFor(m => m.CompanyName);
                        });

                    items.AddGroup()
                        .Caption("Kişisel Bilgiler")
                        .Items(groupItems =>
                        {
                            groupItems.AddSimpleFor(m => m.SendEmail);
                                groupItems.AddSimpleFor(m => m.Phone)
                              .HelpText("Lütfen TR Formatında Girin")
                              .Editor(e => e.TextBox()
                                  .Mask("+90 (X00) 000-0000")
                                  .InputAttr("aria-label", "Phone")
                                  .MaskRules(new { X = new JS("/[02-9]/") })
                                  .MaskInvalidMessage("The phone must have a correct USA phone format")
                              );
                                groupItems.AddSimpleFor(m => m.District)
                                   .Editor(e => e
                                       .SelectBox()
                                       .InputAttr("aria-label", "District")
                                       .DataSource(d => d.Mvc().Controller("WasteForm").LoadAction("DistinctIndexSelectBox"))
                                   );
                         
                        });

                    items.AddGroup()
                        .Caption("Atık Bilgileri")
                        .Items(groupItems =>
                        {
                            groupItems.AddSimpleFor(m => m.WasteCode)
                                .Editor(e => e
                                    .SelectBox()
                                    .InputAttr("aria-label", "WasteCode")
                                        .DataSource(d => d.Mvc().Controller("WsteForm").LoadAction("WasteCodeIndexSelectBox"))
                                );

                           

                            groupItems.AddSimpleFor(m => m.MonthlyAmount);

                     

                            groupItems.AddSimpleFor(m => m.Aktif)
                                .Label(l => l.Visible(false))
                                .Editor(editor => editor.CheckBox().Text("Formda yazdığım bilgileri doğruluyorum"));
                        });

                    items.AddButton()
                        .HorizontalAlignment(HorizontalAlignment.Left)
                        .ButtonOptions(b => b.Text("Register")
                            .Type(ButtonType.Success)
                            .UseSubmitBehavior(true)
                    );

                })
                .FormData(Model)
            )
    }
}
<script>
    let formInstance;

    function onInitialized(e) {
        formInstance = e.component;
    }

    function passwordChanged(e) {
        const editor = formInstance.getEditor('ConfirmPassword');
        if (editor.option('value')) {
            editor.element().dxValidator('validate');
        }
    }

    function changePasswordMode(name) {
        let editor = formInstance.getEditor(name);
        editor.option('mode', editor.option('mode') === 'text' ? 'password' : 'text');
    }
</script>*@
